#!/bin/sh
#
# Initialize zopen
ZOPEN_DONT_PROCESS_CONFIG=1
# Generates a zopen compatible project
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

buildLicenseLookup()
{
  licensesCSV="${MYDIR}/../data/licenses.csv"
  if [ ! -r "${licensesCSV}" ]; then
    return 4
  fi

  validLicenseNames="$(cat ${licensesCSV} | tail +1 | cut -f1 -d',' | xargs)"
}

printSyntax()
{
  echo "zopen-generate will generate a zopen compatible project" >&2
  echo "Syntax: zopen-generate" >&2
}

if [ $# -eq 1 ]; then
  if [ "x$1" = "x--help" ]; then
    printSyntax
    exit 0
  elif [ "x$1" = "x--version" ]; then
    zopen-version $ME
    exit 0
  else
    echo "Unrecognized option $1. Processing terminated" >&2
    printSyntax
    exit 8
  fi
fi

buildLicenseLookup

printHeader "Generate a zopen project"
valid=false
while ! ${valid}; do
  echo "What is the project name?"
  name=$(getInput)
  if ! echo "${name}" | grep -q -E "port$"; then
    valid=true
  else
    printWarning "${name} must not end with port"
  fi
done
echo "Provided a description of the project:"
description=$(getInput)

ZOPEN_VALID_CATEGORIES="$(cat ${MYDIR}/../data/tool_categories.txt)"
valid=false
while ! ${valid}; do
  printHeader "Valid categories: ${ZOPEN_VALID_CATEGORIES}"
  printHeader "What categories does the project fit under? (delimit with a space):"
  categories=$(getInput)
  categories=$(printf "%s" "${categories}" | tr '[:upper:]' '[:lower:]')
  error=false
  if [ -z ${categories} ]; then
    printError "No category specified"
    exit 8
  fi
  for category in $(echo ${categories} | tr ' ' '\n' | sort -u); do
    if ! echo "${ZOPEN_VALID_CATEGORIES}" | tr ' ' '\n' | grep -q "^${category}$"; then
      printWarning "Invalid category specified: ${category}"
      error=true
    fi
  done
  if ! $error; then
    valid=true
  fi
done

valid=false
while ! ${valid}; do
  echo "Provide the community license to use for ${name}'s patches: (select from ${validLicenseNames})"
  license_name="$(getInput | tr -d ' ')"
  if ! echo " ${validLicenseNames}" | grep -q " ${license_name}"; then
    printWarning "License is not valid, please enter a license from one of these names: ${validLicenseNames})"
  else
    licenseName="$(cat ${licensesCSV} | grep "\"${license_name}\"" | cut -f2 -d',')"
    licenseUrl="$(cat ${licensesCSV} | grep "\"${license_name}\"" | cut -f4 -d',')"
    valid=true
  fi
done
echo ${licenseUrl}

echo "Enter ${name}'s stable release source url: (Specify a Git or Tarball URL. If none, press enter)"
stablePath=$(getInput)
echo "Enter ${name}'s z/OS Open Tools build dependencies for the stable build: (Enter multiple dependencies using spaces. E.g: zoslib make grep)"
stableDeps=$(getInput)
echo "Enter ${name}'s dev-line source url: (Specify a Git or Tarball URL. If none, press enter)"
devPath=$(getInput)
echo "Enter ${name}'s z/OS Open Tools build dependencies for the dev build: (Enter multiple dependencies using spaces. E.g: zoslib make grep)"
devDeps=$(getInput)
echo "Enter the default build line: (stable or dev)"
buildline=$(getInput)
echo "Enter ${name}'s z/OS Open Tools runtime dependencies: (example: bash)"
runtimedeps=$(getInput)

project_path="${name}port"

nameUpper=$(echo "$name" | awk '{print toupper($0)}')

if [ -d ${project_path} ]; then
  while true; do
    echo "Directory ${project_path} already exists. Update it? (y, n)"
    clobber=$(getInput)
    if [ "${clobber}" = "n" ]; then
      exit 0
    elif [ "${clobber}" = "y" ]; then
      break
    fi
  done
fi

printHeader "Generating ${project_path} zopen project"
mkdir -p ${name}port/patches

# Create external LICENSE
touch "${name}port/patches/LICENSE" && chtag -tc 819 "${name}port/patches/LICENSE"
printf "%s\nView license contents at %s\n" "${licenseName}" "${licenseUrl}" > "${name}port/patches/LICENSE"

buildenv="${name}port/buildenv"
touch ${buildenv} && chtag -tc 819 ${buildenv}

cp "${MYDIR}/../data/CONTRIBUTING.md" "${name}port/CONTRIBUTING.md"
cp "${MYDIR}/../data/CODEOWNERS" "${name}port/CODEOWNERS"
mkdir -p "${name}port/.github/workflows"
cp ${MYDIR}/../data/*.yml "${name}port/.github/workflows/" 2>/dev/null # no yml files yet?

buildenvContents=""

if [ ! -z "${stablePath}" ]; then
  buildenvContents="${buildenvContents}# Update bump details accordingly. Use bump check to confirm.\n# bump: $name-version /${nameUpper}_VERSION=\"(.*)\"/ ${stablePath}|semver:*\n"
  buildenvContents="${buildenvContents}# ${nameUpper}_VERSION=\"V.R.M\" # Specify a stable release\n"
  buildenvContents="${buildenvContents}# export ZOPEN_STABLE_TAG=\"v\${${nameUpper}_VERSION}\"\n"
  buildenvContents="${buildenvContents}export ZOPEN_STABLE_URL=\"${stablePath}\"\n"
fi
if [ ! -z "${stableDeps}" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_STABLE_DEPS=\"${stableDeps}\"\n"
fi

if [ ! -z "${devPath}" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_DEV_URL=\"${devPath}\"\n"
fi
if [ ! -z "${devDeps}" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_DEV_DEPS=\"${devDeps}\"\n"
fi

if [ ! -z "${buildline}" ] && [ "${buildline}" = "dev" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_BUILD_LINE=\"DEV\"\n"
else
  buildenvContents="${buildenvContents}export ZOPEN_BUILD_LINE=\"STABLE\"\n"
fi

if [ ! -z "${runtimedeps}" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_RUNTIME_DEPS=\"${runtimedeps}\"\n"
fi

buildenvContents="${buildenvContents}export ZOPEN_CATEGORIES=\"${categories}\"\n"

buildenvContents="${buildenvContents}\nzopen_check_results()
{
  dir=\"\$1\"
  pfx=\"\$2\"
  chk=\"\$1/\$2_check.log\"

  # Echo the following information to gauge build health
  echo \"actualFailures:0\"
  echo \"totalTests:1\"
  echo \"expectedFailures:0\"
  echo \"expectedTotalTests:1\"
}

zopen_get_version()
{
  # Modify to echo the version of your tool/library
  # Rather than hardcoding the version, obtain the version by running the tool/library
  echo \"1.0.0\"
}"

/bin/echo "${buildenvContents}" > ${buildenv}

printInfo "${buildenv} created"

touch "${name}port/README.md" && chtag -tc 819 "${name}port/README.md"
cat << EOT > "${name}port/README.md"
[![Automatic version updates](https://github.com/ZOSOpenTools/${name}port/actions/workflows/bump.yml/badge.svg)](https://github.com/ZOSOpenTools/${name}port/actions/workflows/bump.yml)

# ${name}

${description}
EOT
printInfo "${name}port/README.md created"

createCICD()
{
  buildline=$1
  touch "${name}port/cicd-${buildline}.groovy" && chtag -tc 819 "${name}port/cicd-${buildline}.groovy"
  buildlineUpper=$(echo "${buildline}" | awk '{print toupper($0)}')
  cat << EOT > "${name}port/cicd-${buildline}.groovy"
node('linux')
{
  stage ('Poll') {
    checkout([
      \$class: 'GitSCM',
      branches: [[name: '*/main']],
      doGenerateSubmoduleConfigurations: false,
      extensions: [],
      userRemoteConfigs: [[url: 'https://github.com/ZOSOpenTools/${name}port.git']]])
  }
  stage('Build') {
    build job: 'Port-Pipeline', parameters: [string(name: 'PORT_GITHUB_REPO', value: 'https://github.com/ZOSOpenTools/${name}port.git'), string(name: 'PORT_DESCRIPTION', value: '${description}' ), string(name: 'BUILD_LINE', value: '${buildlineUpper}') ]
  }
}
EOT
}

createCICD "stable"
createCICD "dev"

touch "${name}port/.gitignore" && chtag -tc 819 "${name}port/.gitignore"
cat << EOT > "${name}port/.gitignore"
log/
log.DEV/
log.STABLE/
build/
install/
EOT
printInfo "${name}port/.gitignore created"

metalicense="${ZOPEN_ROOTFS}/usr/local/zopen/meta/meta/LICENSE"
ourlicense="${name}port/LICENSE"

if [ -e "${ourlicense}" ]; then
  printError "License already in ${name}port/LICENSE. Please confirm it is consistent with ${metalicense}"
elif [ -e "${metalicense}" ]; then
  cp "${metalicense}" "${ourlicense}"
else
  printWarning "Could not locate LICENSE file ${metalicense} to copy for project ${ourlicense}"
fi

printHeader "${name} project is ready! ${name}port/"
printInfo "Create patches under the ${name}port/patches directory"
printInfo "Run zopen build to build ${name}port"
printInfo "Contact Igor Todorovski (itodorov@ca.ibm.com) to create https://github.com/ZOSOpenTools/${name}port.git"
printInfo "Update the CODEOWNERS, buildenv, and README.md files appropriately"
