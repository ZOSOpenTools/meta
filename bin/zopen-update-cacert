#!/bin/sh
#
# Updates the cacert in zopen meta root directory
#
# Copyright (C) 2023 z/OS Open Tools Community.
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

# Temporary files
for tmp in "${TMPDIR}" "${TMP}" /tmp; do
  if [ ! -z "${tmp}" ] && [ -d "${tmp}" ]; then
    TEMP_CACERT="${tmp}/${LOGNAME}.${RANDOM}.cacert.pem"
    break
  fi
done

cleanupOnExit()
{
  rv=$?
  [ -f "${TEMP_CACERT}" ] && rm -rf "${TEMP_CACERT}"
  exit "${rv}"
}

trap "cleanupOnExit" EXIT INT TERM QUIT HUP

printHelp()
{
  args=$*
cat << HELPDOC
${ME}: Update your cacert.pem file to the latest CA certificates extracted from Mozilla.

Syntax:
  ${ME} [-fhv] [<directory>]

Options:
  -f, --force           update cacert.pem file even if up to date.
  -h, --help            print this help.
  -i, --insecure-fallback
                        (UNSAFE) Skip certificate validation during download.
  -v, --verbose         print verbose messages.
  --version             print version.

Parameters:
  <directory>: the directory where the cacert.pem will be updated.
    The default directory location is: ${default_dir}

HELPDOC
}

getCACertFromCurl()
{
  curlOptions="$1"
  # Get latest CACert from Mozilla through Curl
  printVerbose "Using $(type curl)"
  printVerbose "Downloading ${cacert_update_url}"
  nocertverify=""
  if [ ! -f "${SSL_CERT_FILE}" ]; then
    printVerbose "No cacert file present"
    if ${insecureFallback}; then
      printWarning "Using insecure fallback"
      nocertverify="-k "
    fi
  fi
  curlver="$(type curl)"
  crc=$?
  [ "${crc}" -ne 0 ] && printError "Could not locate curl to download certificate."

  printVerbose "Type of curl: ${curlver}"
  if ! curlCmd -L ${nocertverify} -o "${TEMP_CACERT}" "${cacert_update_url} -fail"; then
    printWarning "Failed to download ${cacert_update_url}, attempting mirror ${cacert_mirror_update_url}"
    if ! curlCmd -L ${nocertverify} -o "${TEMP_CACERT}" "${cacert_mirror_update_url} -fail"; then
      printWarning "Failed to download ${cacert_mirror_update_url}, forcing ipv4"
      if ! curlCmd -L ${nocertverify} -o "${TEMP_CACERT}" "${cacert_update_url} -4 -fail"; then
        printError "curl command could not download from: ${cacert_update_url} using ipv4"
      fi
    fi
  fi

  if [ ! -f "${TEMP_CACERT}" ]; then
    printError "${TEMP_CACERT} was not downloaded"
  fi
}

updateCACert()
{
  printInfo "Re-creating ${ZOPEN_CA}"
  cp "${TEMP_CACERT}" "${ZOPEN_CA}"
}

# Main code start here
verbose=false
export default_dir="$(cd "${MYDIR}/../" && pwd -P)"
export cacert_update_url="https://curl.se/ca/cacert.pem"
export cacert_mirror_update_url="http://curl.haxx.se/ca/cacert.pem"

# Temporary files
for tmp in "${TMPDIR}" "${TMP}" /tmp; do
  if [ ! -z "${tmp}" ] && [ -d "${tmp}" ]; then
    TEMP_CACERT="${tmp}/${LOGNAME}.${RANDOM}.cacert.pem"
    break
  fi
done

if [ -z "${TEMP_CACERT}" ]; then
  printError "Could not find a temporary write location in \$TMPDIR, \$TMP, or /tmp"
fi

dir="${default_dir}"
args=$*
forceUpdate=false
insecureFallback=false
while [ $# -gt 0 ]; do
  case "$1" in
  "-f" | "--force")
    forceUpdate=true
    ;;
  "-h" | "--help" | "-?")
    printHelp "${args}"
    exit 0
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  "-i" | "--insecure-fallback")
    insecureFallback=true
    ;;
  "-v" | "--verbose")
    verbose=true
    ;;
  *)
    if [ "${1#-*}" = "$1" ]; then
      dir="$1"
    else
      echo "Unknown option: $1"
      printHelp "${args}"
      exit 8
    fi
    ;;
  esac
  shift
done

ZOPEN_CA="${dir}/cacert.pem"

if ! [ -r "${ZOPEN_CA}" ]; then
  forceUpdate=true
fi

printHeader "Getting latest CA Certificate"
if ! getCACertFromCurl; then
  if ! getCACertFromCurl -4; then # Try again with ipv4
    printError "Curl failed to download CA Certificate"
  fi
fi

if ${forceUpdate}; then
  updateCACert
elif ! diff "${TEMP_CACERT}" "${ZOPEN_CA}" > /dev/null; then
  while true; do
    printWarning "Your local cacert '${ZOPEN_CA}' is outdated or does not exist. Would you like to update it? (y, n)"
    update=$(getInput)
    if [ "${update}" = "n" ]; then
      exit 0
    elif [ "${update}" = "y" ]; then
      break
    fi
  done

  updateCACert
else
  printInfo "Your cacert '${ZOPEN_CA}' is already up to date"
fi
