#!/bin/env bash
#
# Copyright (C) 2023 z/OS Open Tools Community.
#

#
# All zopen-* scripts MUST start with this code to maintain consistency
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source" >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

pd='split-patches'

printSyntax()
{
  cat << HELPDOC
${ME} - split a patch file into one patch file for each patch.
  Patches are written to ${pd} in the current directory.

Usage: ${ME} [OPTION] [PATCHFILE]

Options:
  --help      display this help and exit.
  --version   print version.

Example:
  ${ME} P1.patch    write P1.patch into multiple patches under ${pd}

HELPDOC
}

if [ "x$1" = "x--help" ]; then
  printSyntax
  exit 0
elif [ "x$1" = "x--version" ]; then
  zopen-version $ME
  exit 0
fi

if [ $# -lt 1 ]; then
  echo "${ME} requires that a patch file be specified. No action performed." >&2
  exit 4
fi

if ! mkdir -p "${pd}"; then
  printf 'Unable to create patch directory: %s. No patch files created\n' "${pd}" >&2
  exit 8
fi

#
# For each aggregate:
#  Extract lines that start with 'diff --git', and put the line numbers
#  for each match into the 'lines' array.
#  Add the 'lastline' to the end of the lines array.
#  These entries indicate the line numbers for each diff file that we will want to create.
#   Get the relative file names (a and b) from these 'diff --git' lines and make sure they
#  match as a check that this is a 'standard' git diff.
#  Put the array of file names into the 'file' array
#
#  Loop through the lines and create new files from the original aggregate file,
#  using the line numbers and file names from the lines and file arrays.
#
for aggregate in $@; do
  info=$(grep -n '^diff --git' "${aggregate}")
  lastline=$(wc -l "$1" | awk '{ print $1; }')
  lastline=$((lastline + 1))
  lines=$(printf "%s" "${info}" | awk -F: ' { print $1; }')
  lines=$(printf '%s\n%s\n' "${lines}" "${lastline}")

  fileA=$(printf "%s" "${info}" | awk ' { i=index($3,"/"); s=substr($3,i+1); print s; }')
  fileB=$(printf "%s" "${info}" | awk ' { i=index($3,"/"); s=substr($3,i+1); print s; }')
  if [ "x${fileA}" != "x${fileB}" ]; then
    printf 'Error. %s does not match the strict requires for a patch file to be split. File skipped\n' "${aggregate}" >&2
    continue
  fi
  file=(${fileA})

  start=''
  i=-1
  printf '%s\n' "${lines}" | while IFS= read -r end; do
    if [ -n "${start}" ]; then
      af="${file[i]}.patch"
      d=$(dirname "${af}")
      rf=$(basename "${af}")
      if ! mkdir -p "${pd}/${d}"; then
        printf 'Unable to create directory %s. Partial splitting has been performed under %s', "${d}" "${pd}" >&2
        exit 8
      fi
      #printf "%s/%s/%s %d %d\n" "${pd}" "${d}" "${rf}" "${start}" "${end}"
      taillines=$((end - start))
      headlines=$((end - 1))
      content=$(head -n "${headlines}" "${aggregate}" | tail -n "${taillines}")
      if ! printf '%s\n' "${content}" > "${pd}/${d}/${rf}"; then
        printf 'Unable to write patch file to %s. Partial splitting has been performed under %s', "${pd}/${d}/${rf}" "${pd}" >&2
        exit 8
      fi
    fi
    start="${end}"
    i=$((i + 1))
  done
done
