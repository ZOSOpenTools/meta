#!/bin/sh
#
# Configuration helper for z/OS Open Tools - https://github.com/ZOSOpenTools
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  # shellcheck disable=SC1091
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp()
{
  cat << HELPDOC
${ME} is a utility for z/OS Open Tools to change the zopen runtime environment.
 

Usage: ${ME} [OPTION] [KEY]

Options:
  --delete          unset and remove the named KEY property from the store
  --get             display the current value for the named KEY property or 
                    the empty string if the property is not found/set
  --set             set the configuration value for the named KEY property
  --list            list all current configuration values
  -?, --help        display this help
  -v, --verbose     run in verbose mode.
  --version         print version.
  --ai              run with tinyllama model via LocalAI by using zopen build,
                    zopen build will send error to the model and the model will provide
                    what patch we need to do

Examples:
  zopen config --get autocacheclean  
                    get the value for the autocacheclean setting
  zopen config --set is_collecting_stats false
                    disable the is_collecting_stats functionality
  zopen build --ai  run with tinyllama model via LocalAI

Notes:
  Configuration options are not validated such that any key/value pairs can
  be added into the global configuration. 3rd-party utilities can store their
  global configuration into the zopen runtime environment store and use the
  zopen config tooling to set/retrieve values. Key names for stored properties
  must conform to the following rules [0-9a-zA-Z_]:
    - uppercase letters, A-Z
    - lowercase letters, a-z
    - numeric digits, 0-9
    - underscore, '_'
  The non-relocatable global configuration file, config.json, can be found at: 
    <\$ZOPEN_ROOTFS>/etc/zopen/config.json
  Manual editing of this configuration file is not recommended and might cause
  issues with the zopen environment if misconfigured.

  
  
Report bugs at https://github.com/ZOSOpenTools/meta/issues.

HELPDOC
}

validateKey(){
# To prevent possible issues in jq, sanitise the keys to a subset
if ! (echo "$1" | /bin/awk '{if ($0 ~ "^[0-9a-zA-Z_]+$") exit 0; exit 1}'); then
  printError "Invalid key '$1' specified. Check for invalid characters and retry command."
fi  
}

getValue(){
  if ! current=$(jq -r ".\"${setting}\"" "${ZOPEN_JSON_CONFIG}"); then
    printError "Unable to retrieve current value for '${setting}'. ${current}. See previous errors for more information and retry command."
  fi
  echo "${current}"
}

# Main code start here
args=$*
cmdtype=""
verbose=false
debug=false

if [ $# -eq 0 ]; then
  printError "No option provided for config. Specify --help to view all available options."
fi
while [ $# -gt 0 ]; do
  printVerbose "Parsing option: $1"
  case "$1" in
  "--set")
    [ $# -lt 3 ] && \
        printError "Parameter error trying to set configuration value"
    cmdtype="set"
    setting="$2"
    validateKey "${setting}"
    newvalue="$3"
    shift 2
    ;;
  "--get")
    [ $# -lt 2 ] && \
        printError "Parameter error trying to get configuration value"
    shift
    setting="$1"
    validateKey "${setting}"
    cmdtype="get"
    ;;
  "--list")
    cmdtype="list"
    ;;
  "--delete")
    shift
    cmdtype="delete"
    setting="$1"
    ;;
  "--help" | "-?")
    printHelp "${args}"
    exit 0
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  "-v" | "--verbose")
    verbose=true
    ;;
  "--debug")
    # shellcheck disable=SC2034
    verbose=true
    # shellcheck disable=SC2034
    debug=true
    ;;
  "--xdebug")
    set -x
    ;;
  *)
    printError "Unexpected parameter '$1'"
    ;;
  esac
  shift
done

case "${cmdtype}" in
  get)  getValue "${setting}"
  ;;
  set)  current=$(getValue "${setting}") 
        [ "${current}" = "${newvalue}" ] && printInfo "New value '${newvalue}' is already configured." && exit 0
        if ! jq --arg newvalue "${newvalue}" \
                ".${setting} = \"$newvalue\"" \
                "${ZOPEN_JSON_CONFIG}" > "${ZOPEN_JSON_CONFIG}.working"; then
          printError "Errors setting new value '${newvalue}' for setting '${setting}'. See previous errors for more information and retry command."
        fi
        mv -f "${ZOPEN_JSON_CONFIG}.working" "${ZOPEN_JSON_CONFIG}"
  ;;
  list) if ! jq -r 'to_entries[] | "\(.key): \(.value)"' "${ZOPEN_JSON_CONFIG}"; then
          printError "Unable to display current configuration. See previous errors for more information and retry command."
        fi
  ;;
  delete) if ! jq "del(.${setting})" "${ZOPEN_JSON_CONFIG}"  > "${ZOPEN_JSON_CONFIG}.working"; then
            printError "Unable to remove property '${setting}' from configuration. See previous errors for more information and retry command."
          fi
          mv -f "${ZOPEN_JSON_CONFIG}.working" "${ZOPEN_JSON_CONFIG}"
  ;;
  *) printError "Required action not specified. Check parameters and retry command."
esac
# At this point, commands completed successfully
exit 0
