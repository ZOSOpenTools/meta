#!/bin/env bash
#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

#
# Print out installed version of z/OS tool and corresponding BREW latest version
#
syntax()
{
  echo "${ME} - print installed version of z/OS tool and corresponding BREW latest version"
  echo "${ME} [OPTION]"
  echo "Options:"
  echo "  --help      display this help and exit"
  echo "  --version   print version"
  echo "  --ai        run with tinyllama model via LocalAI by using zopen build, zopen build will send error to the model and the model will provide what patch we need to do."
}

if [[ $# -eq 1 ]]; then
  if [ "x$1" = "x--help" ]; then
    syntax
    exit 0
  elif [ "x$1" = "x--version" ]; then
    zopen-version $ME
    exit 0
  else
    echo "Unrecognized option $1. Processing terminated" >&2
    syntax
    exit 8
  fi
fi

#
# The following is a hack if you don't want to wait around
# for zopen install --list to run...
# Just do zopen install --list >tool.list before you run
#
if [ -f "tool.list" ]; then
  tools=$(cat tool.list)
else
  tools=$(zopen list --installed --no-header | awk ' { print $1":"$2 }')
fi

brew_version_info=$(curl https://formulae.brew.sh/formula/ 2> /dev/null | grep '<td>')

for rawtool in ${tools}; do
  name=${rawtool%%:*}
  zosver=${rawtool##*:}
  tool=${name%%port}
  brew_line=$(echo "${brew_version_info}" | grep -n ">${tool}<" | awk -F: '{print $1}')
  if [ -z "${brew_line}" ]; then
    brewver="unknown"
  else
    next_brew_line=$((brew_line + 1))
    brewver=$(echo "${brew_version_info}" | sed -n "${next_brew_line}p" | awk -F '<|>' '{print $3}')
  fi
  printf "%-15s zos %25s brew %15s\n" "${tool}" "${zosver}" "${brewver}"
done
