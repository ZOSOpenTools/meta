#!/bin/sh
# Generates a zopen compatible project
ME=$(basename $0)

export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"

. "${utildir}/common.inc"

buildLicenseLookup()
{
  licensesCSV="${utildir}/../data/licenses.csv"
  if [ ! -r "$licensesCSV" ]; then
    return 4;
  fi

  validLicenseNames="$(cat $licensesCSV | tail +1 | cut -f1 -d',' | xargs)"
}

printSyntax() 
{
  args=$*
  echo "zopen-generate will generate a zopen compatible project" >&2
  echo "Syntax: zopen-generate" >&2
}

if [[ $# -eq 1 ]]; then
  if [ "x$1" = "x--help" ]; then
    printSyntax
    exit 0
  elif [ "x$1" = "x--version" ]; then
    zopen --version $ME
    exit 0
  else
    echo "Unrecognized option $1. Processing terminated" >&2
    printSyntax
    exit 8
  fi
fi
 
buildLicenseLookup

printHeader "Generate a zopen project"
valid=false
while ! $valid; do
  echo "What is the project name?"
  name=$(getInput)
  if ! echo "$name" | grep -q -E "port$"; then
    valid=true
  else
    printWarning "$name must not end with port"
  fi
done
echo "Provided a description of the project:"
description=$(getInput)

valid=false
while ! $valid; do
  echo "Provide the community license to use for $name's patches: (select from $validLicenseNames)"
  license_name="$(getInput | tr -d ' ')"
  if ! echo " $validLicenseNames" | grep -q " $license_name"; then
    printWarning "License is not valid, please enter a license from one of these names: $validLicenseNames)"
  else
    licenseName="$(cat $licensesCSV | grep "\"$license_name\"" | cut -f2 -d',')"
    licenseUrl="$(cat $licensesCSV | grep "\"$license_name\"" | cut -f4 -d',')"
    valid=true
  fi
done
echo $licenseUrl

echo "Enter ${name}'s stable release source url: (Specify a Git or Tarball URL. If none, press enter)"
stablePath=$(getInput)
echo "Enter ${name}'s z/OS Open Tools build dependencies for the stable build: (Enter multiple dependencies using spaces. E.g: zoslib make grep)"
stableDeps=$(getInput)
echo "Enter ${name}'s dev-line source url: (Specify a Git or Tarball URL. If none, press enter)"
devPath=$(getInput)
echo "Enter ${name}'s z/OS Open Tools build dependencies for the dev build: (Enter multiple dependencies using spaces. E.g: zoslib make grep)"
devDeps=$(getInput)
echo "Enter the default build line: (stable or dev)"
buildline=$(getInput)
echo "Enter ${name}'s z/OS Open Tools runtime dependencies: (example: bash)"
runtimedeps=$(getInput)

project_path="${name}port"

if [ -d $project_path ]; then
  while true; do
    echo "Directory $project_path already exists. Update it? (y, n)"
    clobber=$(getInput)
    if [ "$clobber" = "n" ]; then
      exit 0
    elif [ "$clobber" = "y" ]; then
      break
    fi
  done
fi

printHeader "Generating $project_path zopen project"
mkdir -p ${name}port/patches

# Create external LICENSE
touch "${name}port/patches/LICENSE" && chtag -tc 819 "${name}port/patches/LICENSE"
echo "${licenseName}\nView license contents at ${licenseUrl}" > "${name}port/patches/LICENSE"

buildenv="${name}port/buildenv"
touch $buildenv && chtag -tc 819 $buildenv

cp "${utildir}/../data/CONTRIBUTING.md" "${name}port/CONTRIBUTING.md"

if [ ! -z "$stablePath" ]; then
  buildenvContents="export ZOPEN_STABLE_URL=\"$stablePath\"\n"
fi
if [ ! -z "$stableDeps" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_STABLE_DEPS=\"$stableDeps\"\n"
fi

if [ ! -z "$devPath" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_DEV_URL=\"$devPath\"\n"
fi
if [ ! -z "$devDeps" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_DEV_DEPS=\"$devDeps\"\n"
fi

if [ ! -z "$buildline" ] && [ "$buildline" = "dev" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_BUILD_LINE=\"DEV\"\n"
else
  buildenvContents="${buildenvContents}export ZOPEN_BUILD_LINE=\"STABLE\"\n"
fi

if [ ! -z "$runtimedeps" ]; then
  buildenvContents="${buildenvContents}export ZOPEN_RUNTIME_DEPS=\"$runtimedeps\"\n"
fi


buildenvContents="${buildenvContents}\nzopen_check_results()
{
  dir=\"\$1\"
  pfx=\"\$2\"
  chk=\"\$1/\$2_check.log\"

  # Echo the following information to gauge build health
  echo \"actualFailures:0\"
  echo \"totalTests:1\"
  echo \"expectedFailures:0\"
  echo \"expectedTotalTests:1\"
}

zopen_append_to_env()
{
  # echo envars outside of PATH, MANPATH, LIBPATH
}

zopen_append_to_setup()
{
  # echo commands that will run when installing via setup.sh
}

zopen_get_version()
{
  # Modify to echo the version of your tool/library
  # Rather than hardcoding the version, obtain the version by running the tool/library
  echo \"1.0.0\"
}"

/bin/echo "$buildenvContents" > $buildenv

printInfo "$buildenv created"

touch "${name}port/README.md" && chtag -tc 819 "${name}port/README.md"
cat <<EOT > "${name}port/README.md"
${name}

${description}
EOT
printInfo "${name}port/README.md created"

createCICD()
{
buildline=$1
touch "${name}port/cicd-$buildline.groovy" && chtag -tc 819 "${name}port/cicd-$buildline.groovy"
buildlineUpper=$(echo "$buildline" | awk '{print toupper($0)}')
cat <<EOT > "${name}port/cicd-$buildline.groovy"
node('linux')
{
  stage ('Poll') {
    checkout([
      \$class: 'GitSCM',
      branches: [[name: '*/main']],
      doGenerateSubmoduleConfigurations: false,
      extensions: [],
      userRemoteConfigs: [[url: 'https://github.com/ZOSOpenTools/${name}port.git']]])
  }
  stage('Build') {
    build job: 'Port-Pipeline', parameters: [string(name: 'PORT_GITHUB_REPO', value: 'https://github.com/ZOSOpenTools/${name}port.git'), string(name: 'PORT_DESCRIPTION', value: '${description}' ), string(name: 'BUILD_LINE', value: '$buildlineUpper') ]
  }
}
EOT
}

createCICD "stable"
createCICD "dev"

touch "${name}port/.gitignore" && chtag -tc 819 "${name}port/.gitignore"
cat <<EOT > "${name}port/.gitignore"
log/
log.DEV/
log.STABLE/
build/
install/
${name}*/
EOT
printInfo "${name}port/.gitignore created"

if [ -e "${utildir}/../../LICENSE" ]; then
  cp "${utildir}/../../LICENSE" "${name}port/LICENSE"
elif [ -n "$ZOPEN_ROOTFS" ]; then
  pkgInstallDir="$(cat "$ZOPEN_ROOTFS/etc/zopen/fstype")"
  if [ -e "${utildir}/../../../$pkgInstallDir/meta/meta/LICENSE" ]; then
    cp "${utildir}/../../../$pkgInstallDir/meta/meta/LICENSE" "${name}port/LICENSE"
  else
    printError "Could not locate LICENSE file to copy for project"
  fi
fi

printHeader "${name} project is ready! ${name}port/"
printInfo "Create patches under the ${name}port/patches directory"
printInfo "Run zopen build to build ${name}port"
printInfo "Contact Mike Fulton (fultonm@ca.ibm.com) to create https://github.com/ZOSOpenTools/${name}port.git"
