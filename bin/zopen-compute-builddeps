#!/bin/env bash
#
# Print out build dependencies (transitive closure) for a given tool
#
#
# Copyright (C) 2023 z/OS Open Tools Community.
#

#
# All zopen-* scripts MUST start with this code to maintain consistency
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source" >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

#
# Display help text.
#
syntax()
{
  cat << HELPDOC
$ME - print out build dependencies (transitive closure) for a given tool.
  NOTE: This tool will clone several repositories into a temporary directory for this computation.
Usage: $ME [OPTION] [tool]
Options:
  --help        display this help and exit
  --version     print version
Examples:
  print out the tools required to build git.
    $ME git
HELPDOC
  exit 0
}

primary_type="STABLE"
secondary_type="DEV"
verbose=true

if [ $# -eq 0 ]; then
  echo "Need to specify a package name." >&2
  syntax
fi

if [[ $# -eq 1 ]]; then
  if [ "x$1" = "x--help" ]; then
    syntax
    exit 0
  elif [ "x$1" = "x--version" ]; then
    zopen-version $ME
    exit 0
  else
    :
  fi
fi

rootpkg="$1"

tmpdir="/tmp/blddep_$$"

if ! mkdir "${tmpdir}"; then
  echo "Unable to create temporary directory for computing transitive closure" >&2
  syntax
fi

if ! cd "${tmpdir}"; then
  echo "Unable to cd into temporary directory ${tmpdir}" >&2
  exit 4
fi

deps="${rootpkg}"
declare -A scanned

changed=true

while ${changed}; do
  changed=false
  for pkg in ${deps}; do
    if ! [[ -v scanned["${pkg}"] ]]; then
      if ! git clone "git@github.com:ZOSOpenTools/${pkg}port.git"; then
        echo "Unable to clone package ${pkg}" >&2
        exit 4
      else
        scanned["${pkg}"]=true
        changed=true
      fi
      newpkgs=$(grep "ZOPEN_${primary_type}_DEPS" "${pkg}port/buildenv" | awk -F '"' '{print $2; }')
      if [ -z "${newpkgs}" ]; then
        # try again with secondary type
        newpkgs=$(grep "ZOPEN_${secondary_type}_DEPS" "${pkg}port/buildenv" | awk -F '"' '{print $2; }')
      fi
      if ${verbose}; then
        echo "${pkg} needs ${newpkgs}"
      fi
      for newpkg in ${newpkgs}; do
        if ! [[ -v scanned["${newpkg}"] ]]; then
          deps="${deps} ${newpkg}"
        fi
      done
    fi
  done
done
echo "Transitive closure of build dependencies for ${rootpkg}:"
for pkg in ${!scanned[@]}; do
  echo "${pkg}"
done
rm -rf "${tmpdir}"
